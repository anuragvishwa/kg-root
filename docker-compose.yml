volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:

networks:
  default:
    name: kgroot-demo

services:
  # 1) Zookeeper (ARM64-safe tag)
  zookeeper:
    image: bitnami/zookeeper:3.9.3-debian-12-r21
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      # If you WANT 4-letter commands later, uncomment:
      # ZOO_4LW_COMMANDS_WHITELIST: "ruok,stat,mntr"
    restart: unless-stopped
    networks: [default]
    healthcheck:
      # Simple TCP check (no nc, no 4lw needed)
      test: ["CMD", "bash", "-lc", "exec 3<>/dev/tcp/127.0.0.1/2181"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 20s

  # 2) Kafka (single broker; ARM64-safe tag)
  kafka:
    image: bitnami/kafka:3.9.0-debian-12-r13
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_BROKER_ID: "1"
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      # listeners: internal (for containers) + host (for your Mac)
      KAFKA_CFG_LISTENERS: "PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:19092"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:19092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092" # containers -> kafka:9092
      - "19092:19092" # host -> localhost:19092
    restart: unless-stopped
    networks: [default]
    healthcheck:
      # Wait until broker is actually serving requests
      test:
        [
          "CMD",
          "bash",
          "-lc",
          "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1",
        ]
      interval: 5s
      timeout: 4s
      retries: 50
      start_period: 60s

  # 3) Neo4j 5 with GDS + APOC
  neo4j:
    image: neo4j:5.26
    hostname: neo4j
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      NEO4J_AUTH: "neo4j/${NEO4J_PASSWORD}"
      NEO4J_PLUGINS: '["graph-data-science","apoc"]'
      NEO4J_db_tx__log_rotation_retention__policy: "false"
      NEO4J_dbms_security_procedures_allowlist: "apoc.*,gds.*"
    ports:
      - "7687:7687"
      - "7474:7474"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/import
      - neo4j_plugins:/plugins
    restart: unless-stopped
    networks: [default]
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "cypher-shell -a bolt://localhost:7687 -u neo4j -p '${NEO4J_PASSWORD}' 'RETURN 1' || exit 1",
        ]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 40s

  # 4) Graph-updater
  graph-updater:
    build: .
    command: >
      sh -c "
        python services/_wait_kafka.py kafka 9092 &&
        python services/graph_updater.py
      "
    depends_on:
      kafka:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    volumes:
      - ./services:/app/services:ro
    environment:
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      NEO4J_URI: "bolt://neo4j:7687"
      NEO4J_USER: "neo4j"
      NEO4J_PASSWORD: "${NEO4J_PASSWORD}"
      KAFKA_BOOTSTRAP: "kafka:9092"
    restart: unless-stopped
    networks: [default]

  # 5) GCN matcher (FastAPI)
  gcn-matcher:
    build: .
    command: uvicorn services.gcn_matcher:app --host 0.0.0.0 --port 8000
    depends_on:
      neo4j:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      NEO4J_URI: "bolt://neo4j:7687"
      NEO4J_USER: "neo4j"
      NEO4J_PASSWORD: "${NEO4J_PASSWORD}"
      KAFKA_BOOTSTRAP: "kafka:9092"
    restart: unless-stopped
    networks: [default]

  # 6) FEKG builder
  fekg-builder:
    build: .
    depends_on:
      kafka:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    command: >
      sh -c "
        python services/_wait_kafka.py kafka 9092 &&
        python services/fekg_builder.py
      "
    environment:
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      NEO4J_URI: "bolt://neo4j:7687"
      NEO4J_USER: "neo4j"
      NEO4J_PASSWORD: "${NEO4J_PASSWORD}"
      KAFKA_BOOTSTRAP: "kafka:9092"
    restart: unless-stopped
    networks: [default]

  # 7) Agno-RCCA agent
  agno-rcca:
    build: .
    depends_on:
      kafka:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      graph-updater:
        condition: service_started
      gcn-matcher:
        condition: service_started
    command: >
      sh -c "
        python services/_wait_kafka.py kafka 9092 &&
        python services/agno_rcca.py
      "
    environment:
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      NEO4J_URI: "bolt://neo4j:7687"
      NEO4J_USER: "neo4j"
      NEO4J_PASSWORD: "${NEO4J_PASSWORD}"
      KAFKA_BOOTSTRAP: "kafka:9092"
    restart: unless-stopped
    networks: [default]

  # 8) Connectors (Node + Python)
  connectors:
    build: .
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      sh -c "
        python services/_wait_kafka.py kafka 9092 &&
        npm run start:connectors
      "
    environment:
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      KAFKA_BOOTSTRAP: "kafka:9092"
    restart: unless-stopped
    networks: [default]

  # 9) Vector (webhook â†’ Kafka)
  vector:
    image: timberio/vector:0.48.0-debian
    command: ["-c", "/etc/vector/vector.toml"]
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP: kafka:9092
      EVENT_TOPIC: events
    volumes:
      - ./vector.toml:/etc/vector/vector.toml:ro
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks: [default]
